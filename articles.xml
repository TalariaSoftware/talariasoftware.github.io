<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/articles.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-01-26T13:21:03-08:00</updated><id>/articles.xml</id><title type="html">Talaria Software</title><subtitle>Software is a means to an end. Your real goals are to delight your customers, grow your business, and make people's lives better. Building software is only valuable when it helps you do those things.</subtitle><entry><title type="html">Update the Readme</title><link href="/articles/update_the_readme" rel="alternate" type="text/html" title="Update the Readme" /><published>2021-01-26T00:00:00-08:00</published><updated>2021-01-26T00:00:00-08:00</updated><id>/articles/update_the_readme</id><content type="html" xml:base="/articles/update_the_readme">&lt;p&gt;This is part of &lt;a href=&quot;/articles/joyful_rails&quot;&gt;Joyful Rails&lt;/a&gt;, a list of
recommendations to make developing your Rails app more productive and joyful.&lt;/p&gt;

&lt;p&gt;In this article, we are talking about updating the readme file.&lt;/p&gt;

&lt;h2 id=&quot;when&quot;&gt;When&lt;/h2&gt;

&lt;p&gt;Every time there is some new piece of information that every developer will
need, or that is not obvious or easy to find, add that to the “readme” file.&lt;/p&gt;

&lt;p&gt;Setting up a new development machine or onboarding a new developer is a great
time to overhaul your readme file. Change anything that is incorrect, unclear,
or missing.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;

&lt;p&gt;Opening an unfamiliar codebase can be very intimidating. A readme file gives
future developers a way to get their bearings. It can’t tell you where
everything is, but it can let you know where to start looking – and that is huge.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;

&lt;p&gt;Your readme file should probably include the name of the app, what it does, how
to set up your development environment, how to run the tests, how to deploy, and any other information a new developer is likely to need.&lt;/p&gt;

&lt;p&gt;This should go into a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example readme file:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;# Hello World&lt;/span&gt;

Universal greeter for all human and non-human entities

&lt;span class=&quot;gu&quot;&gt;## Development&lt;/span&gt;

Instructions on how to develop go here

&lt;span class=&quot;gu&quot;&gt;### Specs&lt;/span&gt;

&lt;span class=&quot;sb&quot;&gt;`rake`&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;### Deployment&lt;/span&gt;

&lt;span class=&quot;sb&quot;&gt;`bin/deploy`&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;### Updating libraries&lt;/span&gt;

&lt;span class=&quot;sb&quot;&gt;`bin/gem_update`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;In the long ago time, readme files were named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.txt&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README&lt;/code&gt; or
occasionally &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Readme&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The all caps version of the file name makes it very easy to notice in a file
listing.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; extension indicates that the file is Markdown so it gets rendered
nicely in GitHub and elsewhere.&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="rails" /><category term="joyful_rails" /><summary type="html">This is part of Joyful Rails, a list of recommendations to make developing your Rails app more productive and joyful.</summary></entry><entry><title type="html">Robot and Human Collaboration with Julie Shah</title><link href="/articles/robot_and_human_collaboration_with_julie_shah" rel="alternate" type="text/html" title="Robot and Human Collaboration with Julie Shah" /><published>2021-01-21T00:00:00-08:00</published><updated>2021-01-21T00:00:00-08:00</updated><id>/articles/robot_and_human_collaboration_with_julie_shah</id><content type="html" xml:base="/articles/robot_and_human_collaboration_with_julie_shah">&lt;p&gt;I was one of the hosts lucky enough to welcome the insightful Julie Shah to the
Greater than Code podcast &lt;a href=&quot;https://www.greaterthancode.com/robot-and-human-collaboration&quot;&gt;episode 216&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Prof. Shah directs the Interactive Robotics Group in the Schwarzman College of
Computing at MIT and is an associate dean of social implications and
responsibilities of computing.&lt;/p&gt;

&lt;p&gt;We discussed some of the subjects in her new book &lt;a href=&quot;https://www.amazon.com/What-Expect-Youre-Expecting-Robots/dp/1541699114&quot;&gt;“What To Expect When You’re
Expecting
Robots”&lt;/a&gt;
including how and when to structure the world for machines and the interactions
between humans and machines in public spaces.&lt;/p&gt;

&lt;iframe src=&quot;https://player.fireside.fm/v2/nERs6yQ-+cbykvRtV?theme=dark&quot; width=&quot;740&quot; height=&quot;200&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;You can find out more about Prof. Shah from her &lt;a href=&quot;https://interactive.mit.edu&quot;&gt;lab’s
website&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="greater_than_code" /><summary type="html">I was one of the hosts lucky enough to welcome the insightful Julie Shah to the Greater than Code podcast episode 216.</summary></entry><entry><title type="html">The Righteous Mind with Rylan Bowers</title><link href="/articles/the_righteous_mind_with_rylan_bowers" rel="alternate" type="text/html" title="The Righteous Mind with Rylan Bowers" /><published>2021-01-14T00:00:00-08:00</published><updated>2021-01-14T00:00:00-08:00</updated><id>/articles/the_righteous_mind_with_rylan_bowers</id><content type="html" xml:base="/articles/the_righteous_mind_with_rylan_bowers">&lt;p&gt;I was one of the hosts lucky enough to welcome the lovely Ryan Bowers to the
Greater than Code podcast &lt;a href=&quot;https://www.greaterthancode.com/the-righteous-mind&quot;&gt;episode 214&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We discussed &lt;a href=&quot;https://righteousmind.com&quot;&gt;“The Righteous Mind”&lt;/a&gt; by Jonathan Haidt
and dug into the nature and origin of morality and moral decision making. This
was my first introduction to the individual-on-an-elephant metaphor which I am
sure I will be using extensively.&lt;/p&gt;

&lt;iframe src=&quot;https://player.fireside.fm/v2/nERs6yQ-+IC-GEYVh?theme=dark&quot; width=&quot;740&quot; height=&quot;200&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;You can find out more about Rylan from his &lt;a href=&quot;https://rylanbowers.com&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="greater_than_code" /><summary type="html">I was one of the hosts lucky enough to welcome the lovely Ryan Bowers to the Greater than Code podcast episode 214.</summary></entry><entry><title type="html">Investigation and Influence with Chelsea Troy</title><link href="/articles/investigation_and_influence_with_chelsea_troy" rel="alternate" type="text/html" title="Investigation and Influence with Chelsea Troy" /><published>2021-01-07T00:00:00-08:00</published><updated>2021-01-07T00:00:00-08:00</updated><id>/articles/investigation_and_influence_with_chelsea_troy</id><content type="html" xml:base="/articles/investigation_and_influence_with_chelsea_troy">&lt;p&gt;I was one of the hosts lucky enough to welcome the amazing Chelsea Troy to the
Greater than Code podcast &lt;a href=&quot;https://www.greaterthancode.com/investigation-and-influence&quot;&gt;episode 207&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We talked about software detective work and then went deep into practical
considerations for living our values and making an impact as technologists and
engineers. There are even a few tidbits on fallibility and Lucifer (the TV
series).&lt;/p&gt;

&lt;iframe src=&quot;https://player.fireside.fm/v2/nERs6yQ-+qbEU9b2g&quot; width=&quot;740&quot; height=&quot;200&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;You can find more about Chelsea from her &lt;a href=&quot;https://chelseatroy.com&quot;&gt;website&lt;/a&gt; or
listen to &lt;a href=&quot;https://www.greaterthancode.com/guests/chelsea-troy&quot;&gt;all of her
appearances&lt;/a&gt; on Greater
than Code.&lt;/p&gt;</content><author><name></name></author><category term="greater_than_code" /><summary type="html">I was one of the hosts lucky enough to welcome the amazing Chelsea Troy to the Greater than Code podcast episode 207.</summary></entry><entry><title type="html">Set Up a Production Environment</title><link href="/articles/set_up_a_production_environment" rel="alternate" type="text/html" title="Set Up a Production Environment" /><published>2021-01-05T00:00:00-08:00</published><updated>2021-01-05T00:00:00-08:00</updated><id>/articles/set_up_a_production_environment</id><content type="html" xml:base="/articles/set_up_a_production_environment">&lt;p&gt;This is part of &lt;a href=&quot;/articles/joyful_rails&quot;&gt;Joyful Rails&lt;/a&gt;, a list of
recommendations to make developing your Rails app more productive and joyful.&lt;/p&gt;

&lt;p&gt;In this article, we are talking about setting up a production environment.&lt;/p&gt;

&lt;h2 id=&quot;when&quot;&gt;When&lt;/h2&gt;

&lt;p&gt;In the interest of rapid user feedback and iteration, I recommend doing this as
soon as possible.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;

&lt;p&gt;A production environment makes your app available to people who aren’t using
your development machine.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dashboard.heroku.com/new-app&quot;&gt;Create a Heroku app&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;Almost every web hosting company can deploy Rails apps. Some can be cheaper than
Heroku in certain scenarios. None that I know of are easier to start with.&lt;/p&gt;

&lt;p&gt;Heroku is incredibly easy to use and can be used for free to start. I recommend
starting with it.&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="rails" /><category term="joyful_rails" /><summary type="html">This is part of Joyful Rails, a list of recommendations to make developing your Rails app more productive and joyful.</summary></entry><entry><title type="html">Default Rake Task</title><link href="/articles/default_rake_task" rel="alternate" type="text/html" title="Default Rake Task" /><published>2020-12-29T00:00:00-08:00</published><updated>2020-12-29T00:00:00-08:00</updated><id>/articles/default_rake_task</id><content type="html" xml:base="/articles/default_rake_task">&lt;p&gt;This is part of &lt;a href=&quot;/articles/joyful_rails&quot;&gt;Joyful Rails&lt;/a&gt;, a list of
recommendations to make developing your Rails app more productive and joyful.&lt;/p&gt;

&lt;p&gt;In this article, we are talking about adding to the default rake task.&lt;/p&gt;

&lt;h2 id=&quot;when&quot;&gt;When&lt;/h2&gt;

&lt;p&gt;I recommend adding to the default rake task every time you add a tool that
automatically checks your codebase.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;

&lt;p&gt;Having a single command to run all of your automated checks and specs makes it
easy to run them after every change and before every deploy.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;

&lt;p&gt;First, create Rake tasks for automated checkers that do not have one.&lt;/p&gt;

&lt;h3 id=&quot;rubocop&quot;&gt;Rubocop&lt;/h3&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/tasks/rubocop.rake&lt;/code&gt; put&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_all_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rubocop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rubocop/rake_task'&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;RuboCop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RakeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake rubocop&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;bundler-audit&quot;&gt;Bundler audit&lt;/h3&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/tasks/bundler_audit.rake&lt;/code&gt; put&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_all_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bundler-audit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler/audit/task'&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Audit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake bundle:audit&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;license-finder&quot;&gt;License Finder&lt;/h3&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/tasks/license_finder.rake&lt;/code&gt; put&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;license_finder: :environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'license_finder'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'--quiet'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake license_finder&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;rails-best-practices&quot;&gt;Rails Best Practices&lt;/h3&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/tasks/rails_best_practices.rake&lt;/code&gt; put&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;rails_best_practices: :environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_best_practices'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake rails_best_practices&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;brakeman&quot;&gt;Brakeman&lt;/h3&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/tasks/brakeman.rake&lt;/code&gt; put&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_all_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'brakeman'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:brakeman&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Check your code with Brakeman&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;check: :environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'brakeman'&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Brakeman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;app_path: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;print_report: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pager: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Brakeman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Warnings_Found_Exit_Code&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filtered_warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake brakeman:check&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;default-rake-task&quot;&gt;Default rake task&lt;/h3&gt;

&lt;p&gt;Edit your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt; define the default rake task.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default: &lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%i[
  rubocop
  spec
  rails_best_practices
  license_finder
  brakeman:check
  bundle:audit
]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To run the default task with all of your automated checks and specs use this
command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake&lt;/code&gt;.&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="rails" /><category term="joyful_rails" /><summary type="html">This is part of Joyful Rails, a list of recommendations to make developing your Rails app more productive and joyful.</summary></entry><entry><title type="html">Hotwire: First Reactions</title><link href="/articles/hotwire_first_reactions" rel="alternate" type="text/html" title="Hotwire: First Reactions" /><published>2020-12-26T00:00:00-08:00</published><updated>2020-12-26T00:00:00-08:00</updated><id>/articles/hotwire_first_reactions</id><content type="html" xml:base="/articles/hotwire_first_reactions">&lt;p&gt;&lt;a href=&quot;https://hotwire.dev&quot;&gt;Hotwire&lt;/a&gt; is a set of libraries and conventions that does for
single-page interactivity on websites what Rails did for web applications.&lt;/p&gt;

&lt;p&gt;It provides all the benefits of client-side single-page application (SPA)
frameworks with almost none of the downsides.&lt;/p&gt;

&lt;p&gt;It does that by making HTML primary and providing a standard set of JavaScript
tools to update and augment the HTML on the page.&lt;/p&gt;

&lt;h2 id=&quot;benefits-of-an-spa&quot;&gt;Benefits of an SPA&lt;/h2&gt;

&lt;p&gt;All the benefits of a single-page app come down to different aspects of the same
thing: reactivity./&lt;em&gt;I find “responsiveness” better than “reactivity” in this use. Will mark other places.&lt;/em&gt;/&lt;/p&gt;

&lt;p&gt;When the user performs an action, the application reacts /&lt;em&gt;responds&lt;/em&gt;/immediately, without
the delay of an HTTP request, page download, render, and state reset.&lt;/p&gt;

&lt;p&gt;When there is a change in application state that is not initiated by the user,
the change is immediately visible to the user without needing to click, reload,
or wait for the page to download and re-render.&lt;/p&gt;

&lt;h2 id=&quot;downsides-of-an-spa&quot;&gt;Downsides of an SPA&lt;/h2&gt;

&lt;p&gt;The downside of SPAs is that they are complicated. That complexity results in
several times more work for developers, while simultaneously breaking
functionality that is included automatically with HTML pages.&lt;/p&gt;

&lt;p&gt;SPAs are not web applications. They are JavaScript applications that users
download and run in their web browsers.&lt;/p&gt;

&lt;p&gt;Users have to wait for the JS bundles to download and initialize before the
application first begins to render. Then, while using the app, they find that the
web browser navigation buttons (back, reload, forward, etc.) cause the app to
break or reset. URLs cannot be used to point to specific parts of the
application, making bookmarks useless. Worse still, keyboard navigation, screen
readers, and other assistive technology are often broken. And if you are running
an uncommon browser or older hardware, you may not be able to use the app at
all.&lt;/p&gt;

&lt;p&gt;All of this could be fixed or mitigated with sufficient care and effort from the
developers, but none of that work is necessary for web applications serving HTML
and CSS.&lt;/p&gt;

&lt;p&gt;Meanwhile, developers are also dealing with other added complications.&lt;/p&gt;

&lt;p&gt;Behavior and views rendered by the server need to be duplicated by the front-end
JavaScript code. There is a entire set of technologies to maintain for the front
end with their own languages, libraries, compile chains, and distribution
processes for running in a wide array of environments. And then there is the
extra abstraction layer, usually JSON, between content on the back end and the
HTML and CSS rendered for users.&lt;/p&gt;

&lt;h2 id=&quot;introducing-hotwire&quot;&gt;Introducing Hotwire&lt;/h2&gt;

&lt;p&gt;Hotwire was &lt;a href=&quot;https://twitter.com/dhh/status/1341420143239450624&quot;&gt;released&lt;/a&gt; on
December 22, 2020 by &lt;a href=&quot;https://twitter.com/dhh/&quot;&gt;DHH&lt;/a&gt; and the rest of the team at
&lt;a href=&quot;https://hey.com&quot;&gt;Hey&lt;/a&gt;. It was extracted from Hey in the same way that Rails was
extracted from Basecamp.&lt;/p&gt;

&lt;p&gt;There are two main libraries that make up Hotwire: Turbo and Stimulus.&lt;/p&gt;

&lt;h3 id=&quot;turbo&quot;&gt;Turbo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://turbo.hotwire.dev&quot;&gt;Turbo&lt;/a&gt; is the next evolution of
&lt;a href=&quot;https://github.com/turbolinks/turbolinks&quot;&gt;Turbolinks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Turbolinks uses JavaScript to replace the body of an HTML page. By avoiding a
page reload, it makes navigating web apps faster. It does this with no custom
JavaScript and, in most cases, is fully transparent to users and developers.&lt;/p&gt;

&lt;p&gt;Turbo takes the strategy a step further and provides tools to update parts of
the page in response to user action or live updates broadcast over a WebSocket.&lt;/p&gt;

&lt;h3 id=&quot;stimulus&quot;&gt;Stimulus&lt;/h3&gt;

&lt;p&gt;Stimulus is the modest JavaScript framework focused on augmenting the HTML already
on the page. It provides a guided way to add dynamic client-side behavior
without changing the way HTML and CSS pages are built and rendered.&lt;/p&gt;

&lt;p&gt;Together, Turbo and Stimulus make it possible to have web apps that behave like
JavaScript applications but are primarily HTML and CSS with minimal
application-specific JavaScript. They offer all the benefits of an SPA, with almost
none of the downsides.&lt;/p&gt;

&lt;h2 id=&quot;how-hotwire-works&quot;&gt;How Hotwire works&lt;/h2&gt;

&lt;p&gt;Probably more important than the libraries that make up Hotwire are the
conventions on how those libraries interact.&lt;/p&gt;

&lt;p&gt;The most important of these conventions is the one that gives Hotwire its name:
HTML Over-The-Wire.&lt;/p&gt;

&lt;p&gt;Traditional SPAs send JSON to the client. The JavaScript app then takes that
JSON and generates HTML that is rendered onto the page.&lt;/p&gt;

&lt;p&gt;When you send HTML over-the-wire, you don’t need all the JavaScript code that
knows how to render it to HTML. It also means that you don’t need to duplicate
your templates or template rendering. The same server-side code generates the
HTML that the user sees, no matter how it gets onto the page.&lt;/p&gt;

&lt;h2 id=&quot;downsides-of-hotwire&quot;&gt;Downsides of Hotwire&lt;/h2&gt;

&lt;p&gt;There is no silver bullet; even Hotwire has its downsides.&lt;/p&gt;

&lt;h3 id=&quot;new-technology&quot;&gt;New Technology&lt;/h3&gt;

&lt;p&gt;Hotwire is a new framework. It hasn’t been proven in a lot of applications and
no one outside of Basecamp has a lot of experience with it.&lt;/p&gt;

&lt;p&gt;However, Stimulus is proven technology that’s been around for years. Turbo
evolved from Turbolinks which has been a part of Rails since 2012.&lt;/p&gt;

&lt;p&gt;And all of Hotwire is in production at Hey.&lt;/p&gt;

&lt;h3 id=&quot;convention-dependent&quot;&gt;Convention Dependent&lt;/h3&gt;

&lt;p&gt;Hotwire with Rails is built on an extensive set of conventions that allow the
different parts to work together. If you do not follow these conventions
carefully, you will end up with a hairy mess of spaghetti code.&lt;/p&gt;

&lt;p&gt;Once these conventions are well-understood and strongly modeled, they are easy
to follow; but until then, there is a significant risk of making your code
confusing and buggy.&lt;/p&gt;

&lt;h3 id=&quot;complicated&quot;&gt;Complicated&lt;/h3&gt;

&lt;p&gt;Hotwire is a huge improvement over SPA frameworks, but it is still complicated
— really complicated.&lt;/p&gt;

&lt;h3 id=&quot;integration-specs-require-javascript&quot;&gt;Integration Specs Require JavaScript&lt;/h3&gt;

&lt;p&gt;It seems the only way to write specifications that demonstrate your Hotwire
functionality is working as intended is to use Capybara with a
JavaScript-capable web browser. This is orders of magnitude slower than the
Rack-based browser used when you don’t need to test JavaScript integration.&lt;/p&gt;

&lt;p&gt;Other SPA frameworks have the same problem. The best way to mitigate it is with
strong, simple conventions that give you a lot of confidence that the
integration works, so few integration specs are needed.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Hotwire provides an HTML/CSS-centric way of creating live and reactive web
applications. I believe it will revolutionize reactive web apps the same way
Rails revolutionized web apps.&lt;/p&gt;

&lt;p&gt;I highly recommend learning about it and adding it to your tool belt. Anytime
you want to improve a portion of your web app by making it more instant and
reactive, Hotwire is the tool to reach for.&lt;/p&gt;

&lt;p&gt;The smart thing to do is add Hotwire little by little to places where it will
have the biggest impact. But the technology is so exciting, I am considering
rewriting entire applications to take full advantage of it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you are interested in other ways to make developing your Rails application
awesome, take a look at &lt;a href=&quot;/articles/joyful_rails&quot;&gt;Joyful Rails&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="rails" /><category term="hotwire" /><category term="SPA" /><summary type="html">Hotwire is a set of libraries and conventions that does for single-page interactivity on websites what Rails did for web applications.</summary></entry><entry><title type="html">Use a License Monitor</title><link href="/articles/license_monitoring" rel="alternate" type="text/html" title="Use a License Monitor" /><published>2020-12-22T00:00:00-08:00</published><updated>2020-12-22T00:00:00-08:00</updated><id>/articles/license_monitoring</id><content type="html" xml:base="/articles/license_monitoring">&lt;p&gt;This is part of &lt;a href=&quot;/articles/joyful_rails&quot;&gt;Joyful Rails&lt;/a&gt;, a list of
recommendations to make developing your Rails app more productive and joyful.&lt;/p&gt;

&lt;p&gt;In this article, we are talking about using a license monitor.&lt;/p&gt;

&lt;h2 id=&quot;when&quot;&gt;When&lt;/h2&gt;

&lt;p&gt;The longer you wait before adding a license monitor, the more work you will have
to do to correct problems that have accumulated. For that reason, I recommend
adding a license monitor early – and absolutely before you start distributing your
application.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;

&lt;p&gt;Rails applications often leverage an extensive network of open
source software distributed under a variety of licenses. It is very important to
avoid using software if you do not agree with the terms of the license.&lt;/p&gt;

&lt;p&gt;A license monitor can check the licenses of your libraries and make sure they
only use licenses you agree to abide by.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;

&lt;p&gt;Use &lt;a href=&quot;https://github.com/pivotal/LicenseFinder&quot;&gt;License Finder&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;

&lt;p&gt;To install, add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem 'license_finder'&lt;/code&gt; to the development section of your
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To run, use the command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;license_finder&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;configure&quot;&gt;Configure&lt;/h3&gt;

&lt;p&gt;For License Finder to work, it needs to know which licenses are acceptable to you.
Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permit&lt;/code&gt; subcommand to record those. Here is an example with
what I think are reasonable defaults:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder permit add MIT MIT&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ruby &lt;span class=&quot;s2&quot;&gt;&quot;Apache 2.0&quot;&lt;/span&gt; ISC BSD &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;Simplified BSD&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;New BSD&quot;&lt;/span&gt; BSD-3-Clause 0BSD BSD&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Unlicense CC0-1.0 CC-BY-3.0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
CC-BY-4.0 WTFPL &lt;span class=&quot;s2&quot;&gt;&quot;Brakeman Public Use License&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some packages list multiple licenses in a way that License Finder doesn’t
understand. For those, we need to correct which licenses are available.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder licenses add amdefine MIT
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder licenses add amdefine BSD-3-Clause

bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder licenses add atob MIT
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder licenses add atob Apache-2.0

bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder licenses add node-forge BSD-3-Clause
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder licenses add node-forge GPL-2.0

bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder licenses add pako MIT
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder licenses add pako Zlib

bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder licenses add path-is-inside WTFPL
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder licenses add path-is-inside MIT

bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder licenses add sha.js MIT
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder licenses add sha.js BSD-3-Clause
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, if you followed the advice on &lt;a href=&quot;library_vulnerability_checks&quot;&gt;library vulnerability
checks&lt;/a&gt; then you installed
&lt;a href=&quot;https://github.com/rubysec/bundler-audit#readme&quot;&gt;bundler-audit&lt;/a&gt;. Bundler-audit
is has a GPL license, which means we can’t incorporate it into non-GPL code. But
it is not part of our app – it’s only a tool we use – so it’s okay.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;license_finder approvals add bundler-audit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;caveat&quot;&gt;Caveat&lt;/h2&gt;

&lt;p&gt;I am not a lawyer and neither is License Finder. None of this will guarantee
that you do not illegally incorporate other people’s software into your code.
Nor will it guarantee that you are not creating liabilities or obligations that
you do not want.&lt;/p&gt;

&lt;p&gt;If your need legal advise, consult with an attorney licensed to practice in your
jurisdiction.&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="rails" /><category term="joyful_rails" /><summary type="html">This is part of Joyful Rails, a list of recommendations to make developing your Rails app more productive and joyful.</summary></entry><entry><title type="html">Code Vulnerability Checks</title><link href="/articles/code_vulnerability_checks" rel="alternate" type="text/html" title="Code Vulnerability Checks" /><published>2020-12-15T00:00:00-08:00</published><updated>2020-12-15T00:00:00-08:00</updated><id>/articles/code_vulnerability_checks</id><content type="html" xml:base="/articles/code_vulnerability_checks">&lt;p&gt;This is part of &lt;a href=&quot;/articles/joyful_rails&quot;&gt;Joyful Rails&lt;/a&gt;, a list of
recommendations to make developing your Rails app more productive and joyful.&lt;/p&gt;

&lt;p&gt;In this article, we are talking about checking for code vulnerabilities.&lt;/p&gt;

&lt;h2 id=&quot;when&quot;&gt;When&lt;/h2&gt;

&lt;p&gt;You should check for code vulnerabilities before creating a production environment.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;

&lt;p&gt;As soon as you make your application available on the Internet, if there is a
vulnerability in your code, it is possible that that vulnerability could be used
to compromise your application.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;

&lt;p&gt;Use &lt;a href=&quot;https://brakemanscanner.org&quot;&gt;Brakeman&lt;/a&gt; for code analysis to catch potential
security vulnerabilities.&lt;/p&gt;

&lt;p&gt;To install, add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem 'brakeman'&lt;/code&gt; to the development section of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; and
run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To run use the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brakeman&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Fix any issues Brakeman finds.&lt;/p&gt;

&lt;!-- link to default rake task --&gt;

&lt;h2 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h2&gt;

&lt;p&gt;Brakeman checks for a lot of common errors that create security vulnerabilities.
Of course, it cannot catch all security issues. Be careful out there.&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="rails" /><category term="joyful_rails" /><summary type="html">This is part of Joyful Rails, a list of recommendations to make developing your Rails app more productive and joyful.</summary></entry><entry><title type="html">Library Vulnerability Checks</title><link href="/articles/library_vulnerability_checks" rel="alternate" type="text/html" title="Library Vulnerability Checks" /><published>2020-12-08T00:00:00-08:00</published><updated>2020-12-08T00:00:00-08:00</updated><id>/articles/library_vulnerability_checks</id><content type="html" xml:base="/articles/library_vulnerability_checks">&lt;p&gt;This is part of &lt;a href=&quot;/articles/joyful_rails&quot;&gt;Joyful Rails&lt;/a&gt;, a list of
recommendations to make developing your Rails app more productive and joyful.&lt;/p&gt;

&lt;p&gt;In this article, we are talking about checking for library vulnerabilities.&lt;/p&gt;

&lt;h2 id=&quot;when&quot;&gt;When&lt;/h2&gt;

&lt;p&gt;You should check for library vulnerability before creating a production
environment.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;

&lt;p&gt;As soon as you make your application available on the Internet, if there is a
vulnerability in one of the libraries you used, it is possible that that
vulnerability could be used to compromise your application.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;

&lt;p&gt;Use &lt;a href=&quot;https://github.com/rubysec/bundler-audit#readme&quot;&gt;bundler-audit&lt;/a&gt; to check for
known security vulnerabilities in your gems.&lt;/p&gt;

&lt;p&gt;To install, add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem 'bundler-audit'&lt;/code&gt; to the development section of your
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To run the checks, use the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle audit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Update any gems with vulnerabilities.&lt;/p&gt;

&lt;!-- link to gem update and default rake task --&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;There are services that will monitor your running applications for libraries with
known vulnerabilities. They are a much better solution for applications that are
not under active development or that, for some other reason, go a long time
between updates.&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="rails" /><category term="joyful_rails" /><summary type="html">This is part of Joyful Rails, a list of recommendations to make developing your Rails app more productive and joyful.</summary></entry></feed>